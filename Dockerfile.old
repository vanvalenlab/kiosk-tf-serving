FROM nvcr.io/vvlab/tensorflow:18.04-py3

RUN apt-get update && apt-get install -y \
        automake \
        build-essential \
        curl \
        git \
        libcurl3-dev \
        libfreetype6-dev \
        libpng12-dev \
        libzmq3-dev \
        pkg-config \
        python-dev \
        python-numpy \
        python-pip \
        software-properties-common \
        swig \
        zip \
        zlib1g-dev \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN add-apt-repository ppa:ubuntu-toolchain-r/test -y && \
    apt-get update -y && \
    apt-get install libstdc++6 -y && \
    apt-get dist-upgrade -y

# Install nccl from scratch
RUN mkdir /usr/local/nccl2
ADD lib/nccl_2.2.12-1+cuda9.0_x86_64.txz /usr/local/nccl2
RUN mv /usr/local/nccl2/nccl_2.2.12-1+cuda9.0_x86_64/* /usr/local/nccl2 && \
    rm -rf /usr/local/nccl2/nccl_2.2.12-1+cuda9.0_x86_64/

ENV TF_NCCL_VERSION='2.2.12' \
    NCCL_INSTALL_PATH=/usr/local/nccl2

# Set up grpc

RUN pip install enum34 futures mock six boto3 && \
    pip install --pre 'protobuf>=3.0.0a3' && \
    pip install -i https://testpypi.python.org/simple --pre grpcio

# Set up Bazel.

# We need to add a custom PPA to pick up JDK8, since trusty doesn't
# have an openjdk8 backport.  openjdk-r is maintained by a reliable contributor:
# Matthias Klose (https://launchpad.net/~doko).  It will do until
# we either update the base image beyond 14.04 or openjdk-8 is
# finally backported to trusty; see e.g.
#   https://bugs.launchpad.net/trusty-backports/+bug/1368094
RUN add-apt-repository -y ppa:openjdk-r/ppa && \
    apt-get update && \
    apt-get install -y openjdk-8-jdk openjdk-8-jre-headless && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Running bazel inside a `docker build` command causes trouble, cf:
#   https://github.com/bazelbuild/bazel/issues/134
# The easiest solution is to set up a bazelrc file forcing --batch.
RUN echo "startup --batch" >>/root/.bazelrc
# Similarly, we need to workaround sandboxing issues:
#   https://github.com/bazelbuild/bazel/issues/418
RUN echo "build --spawn_strategy=standalone --genrule_strategy=standalone" \
    >>/root/.bazelrc
ENV BAZELRC=/root/.bazelrc \
    BAZEL_VERSION=0.14.0
# Install the most recent bazel release.
WORKDIR /
RUN mkdir /bazel && \
    cd /bazel && \
    curl -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    curl -fSsL -o /bazel/LICENSE https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \
    chmod +x bazel-*.sh && \
    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    cd / && \
    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh

# Download TensorFlow Serving
RUN echo "deb [arch=amd64] http://storage.googleapis.com/tensorflow-serving-apt stable tensorflow-model-server tensorflow-model-server-universal" |  tee /etc/apt/sources.list.d/tensorflow-serving.list && \
    curl https://storage.googleapis.com/tensorflow-serving-apt/tensorflow-serving.release.pub.gpg | apt-key add -

RUN apt-get update && apt-get install tensorflow-model-server

#ENV AWS_ACCESS_KEY_ID \
#    AWS_SECRET_ACCESS_KEY \
#    AWS_S3_BUCKET \
#    MODEL_PREFIX="" \
#    REST_PORT=8051 \
#    RPC_PORT=8500 \
#    REST_TIMEOUT=180000
#    LOG_LEVEL=1

COPY generate_config.py /opt/generate_config.py

# for debugging purposes
#COPY ./docker/Dockerfile.devel_gpu /


COPY models.conf /opt

COPY tf_serving_startup.sh /
RUN chmod 755 ./tf_serving_startup.sh
CMD ["/bin/sh", "-c", "./tf_serving_startup.sh"]

#CMD ["/bin/sh", "-c", \
#    "python /opt/generate_config.py", \
#    "--model_prefix=$MODEL_PREFIX", \
#    "--aws_s3_bucket=$AWS_S3_BUCKET", \
#    "--aws_access_key_id=$AWS_ACCESS_KEY_ID", \
#    "--aws_secret_access_key=$AWS_SECRET_ACCESS_KEY", \
#    "&&", \
#    "tensorflow_model_server", \
#    "--port=$RPC_PORT", \
#    "--rest_api_port=$REST_PORT", \
#    "--rest_api_timeout_in_ms=$REST_TIMEOUT", \
#    "--model_config_file=/opt/models.conf", \
#    "&> log_file.txt"]

#  && echo $REST_PORT && \
#      -v$LOG_LEVEL \

#CMD sleep 180000
